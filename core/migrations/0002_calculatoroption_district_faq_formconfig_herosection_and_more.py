# Generated by Django 5.2.6 on 2025-09-21 21:02

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CalculatorOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('option_type', models.CharField(choices=[('vehicle_type', 'Тип транспортного средства'), ('category', 'Категория'), ('extra', 'Дополнительный параметр')], help_text='Type of option', max_length=50, verbose_name='Тип опции')),
                ('name', models.CharField(help_text="Option name (e.g., 'Седан')", max_length=255, verbose_name='Название опции')),
                ('value', models.CharField(help_text="Option value (e.g., '1')", max_length=50, verbose_name='Значение')),
                ('discount', models.CharField(blank=True, help_text="Discount value (e.g., '5')", max_length=50, verbose_name='Скидка')),
                ('parent', models.ForeignKey(blank=True, help_text='Parent option for hierarchical options', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.calculatoroption', verbose_name='Родительская опция')),
            ],
            options={
                'verbose_name': 'Опция калькулятора',
                'verbose_name_plural': 'Опции калькулятора',
            },
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="District or area name (e.g., 'Зеленоград')", max_length=255, verbose_name='Название района')),
                ('slug', models.SlugField(blank=True, help_text='URL-friendly slug', unique=True, verbose_name='Слаг')),
                ('url_name', models.CharField(help_text="Django URL name (e.g., 'zelenograd')", max_length=255, verbose_name='Имя URL')),
            ],
            options={
                'verbose_name': 'Район',
                'verbose_name_plural': 'Районы',
            },
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(help_text='Question text', max_length=255, verbose_name='Вопрос')),
                ('answer', models.TextField(help_text='Answer text', verbose_name='Ответ')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order in the FAQ section', verbose_name='Порядок')),
            ],
            options={
                'verbose_name': 'Вопрос FAQ',
                'verbose_name_plural': 'Вопросы FAQ',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='FormConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('form_id', models.CharField(help_text="Unique form identifier (e.g., 'form_1')", max_length=255, unique=True, verbose_name='Идентификатор формы')),
                ('title', models.CharField(blank=True, help_text="Form title (e.g., 'Просто оставьте заявку')", max_length=255, verbose_name='Заголовок формы')),
                ('f_vid', models.CharField(blank=True, help_text="Hidden field 'f_vid' value", max_length=50, verbose_name='f_vid')),
                ('page_id', models.CharField(blank=True, help_text="Hidden field 'page_id' value", max_length=50, verbose_name='page_id')),
                ('dop_id', models.CharField(blank=True, help_text="Hidden field 'dop_id' value", max_length=50, verbose_name='dop_id')),
                ('background_image', models.ImageField(blank=True, help_text='Background image for the form section', upload_to='form_bg/', verbose_name='Фоновое изображение')),
            ],
            options={
                'verbose_name': 'Конфигурация формы',
                'verbose_name_plural': 'Конфигурации форм',
            },
        ),
        migrations.CreateModel(
            name='HeroSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', models.CharField(help_text="Page identifier (e.g., 'moscow_services')", max_length=255, unique=True, verbose_name='Страница')),
                ('title', models.CharField(help_text="Main heading (e.g., 'Эвакуатор в Москве')", max_length=255, verbose_name='Заголовок')),
                ('description', models.TextField(help_text='Description text for the hero section', verbose_name='Описание')),
                ('background_image', models.ImageField(blank=True, help_text='Background image for the hero section', upload_to='hero_images/', verbose_name='Фоновое изображение')),
                ('low_price', models.DecimalField(decimal_places=2, help_text='Lowest price for the offer', max_digits=10, verbose_name='Минимальная цена')),
                ('price_currency', models.CharField(default='RUB', help_text="Currency code (e.g., 'RUB')", max_length=3, verbose_name='Валюта')),
                ('availability_url', models.URLField(blank=True, help_text="Schema.org availability URL (e.g., 'http://schema.org/InStock')", verbose_name='URL доступности')),
                ('url_name', models.CharField(help_text='Django URL name for the offer link', max_length=255, verbose_name='Имя URL для ссылки')),
            ],
            options={
                'verbose_name': 'Секция Hero',
                'verbose_name_plural': 'Секции Hero',
            },
        ),
        migrations.CreateModel(
            name='MetaData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', models.CharField(help_text="Unique identifier for the page (e.g., 'moscow_services')", max_length=255, unique=True, verbose_name='Страница')),
                ('title', models.CharField(help_text='Page title for SEO', max_length=255, verbose_name='Заголовок страницы')),
                ('keywords', models.TextField(blank=True, help_text='Comma-separated keywords for SEO', verbose_name='Ключевые слова')),
                ('description', models.TextField(blank=True, help_text='Page description for SEO', verbose_name='Описание')),
                ('og_url', models.URLField(blank=True, help_text='Open Graph URL', verbose_name='OG URL')),
                ('og_title', models.CharField(blank=True, help_text='Open Graph title', max_length=255, verbose_name='OG Заголовок')),
                ('og_image', models.ImageField(blank=True, help_text='Open Graph image', upload_to='og_images/', verbose_name='OG Изображение')),
                ('og_description', models.TextField(blank=True, help_text='Open Graph description', verbose_name='OG Описание')),
                ('canonical_url_name', models.CharField(help_text="Django URL name for canonical link (e.g., 'moscow_services')", max_length=255, verbose_name='Имя URL для канонической ссылки')),
            ],
            options={
                'verbose_name': 'Мета-данные',
                'verbose_name_plural': 'Мета-данные',
            },
        ),
        migrations.CreateModel(
            name='OrderStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Step title (e.g., 'Связаться с нами')", max_length=255, verbose_name='Заголовок шага')),
                ('description', models.TextField(help_text='Step description', verbose_name='Описание шага')),
                ('icon', models.ImageField(blank=True, help_text='Icon for the step', upload_to='order_icons/', verbose_name='Иконка шага')),
                ('number_icon', models.ImageField(blank=True, help_text='Number icon for the step', upload_to='order_number_icons/', verbose_name='Номерная иконка')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order of the step in the carousel', verbose_name='Порядок')),
            ],
            options={
                'verbose_name': 'Шаг заказа',
                'verbose_name_plural': 'Шаги заказа',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Photo for the gallery', upload_to='gallery/', verbose_name='Изображение')),
                ('thumbnail', models.ImageField(blank=True, help_text='Thumbnail for the photo', upload_to='gallery_thumbnails/', verbose_name='Миниатюра')),
                ('caption', models.CharField(blank=True, help_text='Photo caption', max_length=255, verbose_name='Подпись')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order in the gallery', verbose_name='Порядок')),
            ],
            options={
                'verbose_name': 'Фото',
                'verbose_name_plural': 'Фотогалерея',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Price',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service', models.CharField(help_text="Service name (e.g., 'Эвакуатор для мотоциклов')", max_length=255, verbose_name='Услуга')),
                ('price', models.CharField(help_text="Price (e.g., 'от 4000 р.')", max_length=50, verbose_name='Цена')),
            ],
            options={
                'verbose_name': 'Цена услуги',
                'verbose_name_plural': 'Прайс-лист',
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page', models.CharField(help_text="Page identifier (e.g., 'moscow_services')", max_length=255, unique=True, verbose_name='Страница')),
                ('rating_value', models.FloatField(default=0.0, help_text='Average rating (e.g., 4.9)', verbose_name='Средний рейтинг')),
                ('review_count', models.PositiveIntegerField(default=0, help_text='Number of reviews (e.g., 137)', verbose_name='Количество отзывов')),
                ('item_reviewed', models.CharField(help_text="Item reviewed (e.g., 'Услуги авто эвакуатора')", max_length=255, verbose_name='Отзыв о')),
                ('worst_rating', models.PositiveIntegerField(default=1, help_text='Worst possible rating (e.g., 1)', verbose_name='Минимальный рейтинг')),
            ],
            options={
                'verbose_name': 'Рейтинг',
                'verbose_name_plural': 'Рейтинги',
            },
        ),
        migrations.CreateModel(
            name='VideoReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Review title (e.g., 'Видеоотзыв клиента Nissan Teana')", max_length=255, verbose_name='Заголовок отзыва')),
                ('youtube_url', models.URLField(help_text='YouTube video URL', verbose_name='URL видео')),
                ('thumbnail', models.ImageField(blank=True, help_text='Thumbnail image for the video', upload_to='video_thumbnails/', verbose_name='Миниатюра')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order in the carousel', verbose_name='Порядок')),
            ],
            options={
                'verbose_name': 'Видеоотзыв',
                'verbose_name_plural': 'Видеоотзывы',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='WhyChooseUs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Reason title (e.g., 'Все документы для страховой компании')", max_length=255, verbose_name='Заголовок преимущества')),
                ('description', models.TextField(help_text='Reason description', verbose_name='Описание преимущества')),
                ('icon', models.ImageField(blank=True, help_text='Icon for the reason', upload_to='why_choose_us_icons/', verbose_name='Иконка')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order in the section', verbose_name='Порядок')),
            ],
            options={
                'verbose_name': 'Преимущество',
                'verbose_name_plural': 'Преимущества',
                'ordering': ['order'],
            },
        ),
        migrations.DeleteModel(
            name='Document',
        ),
        migrations.DeleteModel(
            name='Page',
        ),
        migrations.DeleteModel(
            name='Review',
        ),
        migrations.RemoveField(
            model_name='service',
            name='name',
        ),
        migrations.RemoveField(
            model_name='service',
            name='price_per_km',
        ),
        migrations.RemoveField(
            model_name='service',
            name='slug',
        ),
        migrations.AddField(
            model_name='service',
            name='title',
            field=models.CharField(default=1, help_text="Service title (e.g., 'Вызвать эвакуатор в Москве')", max_length=255, verbose_name='Заголовок услуги'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='service',
            name='url_name',
            field=models.CharField(blank=True, help_text='Django URL name for the service', max_length=255, verbose_name='Имя URL'),
        ),
        migrations.AlterField(
            model_name='service',
            name='description',
            field=models.TextField(help_text='Service description', verbose_name='Описание услуги'),
        ),
        migrations.AlterField(
            model_name='service',
            name='image',
            field=models.ImageField(blank=True, help_text='Image for the service', upload_to='service_images/', verbose_name='Изображение'),
        ),
    ]

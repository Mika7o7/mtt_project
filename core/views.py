from django.shortcuts import render
from .models import MetaData, HeroSection, District, OrderStep, FormConfig, VideoReview, Photo, Price, Service, WhyChooseUs, FAQ, Rating, CalculatorOption


import requests
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt  # –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, –Ω–æ –ª—É—á—à–µ —É–±—Ä–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å token –≤ —Ñ–æ—Ä–º–µ

TELEGRAM_TOKEN = "1625085576:AAGR1VzsLToXxe5NxiPGA-IZy1NmQlbNX7U"  # –∏–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –≤ settings.SECRET
TELEGRAM_CHAT_ID = "1628997906"

@csrf_exempt  # –µ—Å–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ—à—å csrf –≤ —Ñ–æ—Ä–º–µ, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å csrf_exempt
def submit_form(request):
    if request.method == "POST":
        name = request.POST.get("f_name", "").strip()
        phone = request.POST.get("f_phone", "").strip()
        auto = request.POST.get("f_auto", "").strip()
        # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é: –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É
        if not phone:
            return JsonResponse({"success": False, "message": "–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–ª–µ—Ñ–æ–Ω."})

        message = (
            "üö® <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</b>\n\n"
            f"üë§ –ò–º—è: {name or '‚Äî'}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"üöó –ê–≤—Ç–æ: {auto or '‚Äî'}"
        )

        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": "HTML",
        }
        try:
            r = requests.post(url, data=payload, timeout=5)
            r.raise_for_status()
            return JsonResponse({"success": True, "message": "–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞."})
        except Exception as e:
            # –ª–æ–≥–∏—Ä—É–π e
            return JsonResponse({"success": False, "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram."})

    return JsonResponse({"success": False, "message": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"}, status=400)


@csrf_exempt  # –µ—Å–ª–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å CSRF –≤ —Ñ–æ—Ä–º–µ ‚Äî —É–±–µ—Ä–∏ —ç—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
def submit_calculator(request):
    if request.method != "POST":
        return JsonResponse({"success": False, "message": "–¢–æ–ª—å–∫–æ POST"}, status=400)

    # –ø–æ–ª—É—á–∏–º –ø–æ–ª—è ‚Äî –∏–∑–º–µ–Ω—è–π –∏–º–µ–Ω–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    name = request.POST.get("f_name", "").strip()
    phone = request.POST.get("f_phone", "").strip()
    vk = request.POST.get("calc_vk", "")
    km = request.POST.get("calc_km", "")
    total = request.POST.get("calc_total", "")
    extras = request.POST.get("calc_extras", "")
    comment = request.POST.get("f_comment", "")

    # –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if not phone:
        return JsonResponse({"success": False, "message": "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω"})

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    message = (
        "üöó <b>–ó–∞—è–≤–∫–∞ –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞</b>\n"
        f"üë§ –ò–º—è: {name or '‚Äî'}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–¢–∏–ø: {vk}\n"
        f"–ö–º: {km}\n"
        f"–î–æ–ø. –æ–ø—Ü–∏–∏ —Å—É–º–º–∞: {extras}\n"
        f"–ò—Ç–æ–≥: {total} —Ä—É–±.\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '‚Äî'}"
    )

    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message, "parse_mode": "HTML"}

    try:
        r = requests.post(url, data=payload, timeout=5)
        r.raise_for_status()
    except Exception as e:
        # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (print –∏–ª–∏ logger) –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        print("Telegram send error:", e)
        return JsonResponse({"success": False, "message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."})

    return JsonResponse({"success": True, "message": "–°–ø–∞—Å–∏–±–æ! –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞."})


def index(request):
    """
    Renders the index page with data for all sections.
    """
    metadata = MetaData.objects.get(page='moscow_services')
    hero = HeroSection.objects.get(page='moscow_services')
    districts = District.objects.all()
    order_steps = OrderStep.objects.all()
    form_configs = FormConfig.objects.all()
    video_reviews = VideoReview.objects.all()
    photos = Photo.objects.all()
    prices = Price.objects.all()
    services = Service.objects.all()
    why_choose_us = WhyChooseUs.objects.all()
    faqs = FAQ.objects.all()[:6]
    rating = Rating.objects.get(page='moscow_services')
    calculator_options = CalculatorOption.objects.all()

    context = {
        'metadata': metadata,
        'hero': hero,
        'districts': districts,
        'order_steps': order_steps,
        'form_configs': form_configs,
        'video_reviews': video_reviews,
        'photos': photos,
        'prices': prices,
        'services': services,
        'why_choose_us': why_choose_us,
        'faqs': faqs,
        'rating': rating,
        'calculator_options': calculator_options,
    }
    return render(request, 'index.html', context)

def test(request):
    return render(request, 'test.html')

def about(request):
    return render(request, 'about.html')

def services(request):
    return render(request, 'about.html')

def contacts(request):
    return render(request, 'contacts.html')

def moscow_services(request):
    return render(request, 'about.html')

def airport(request):
    return render(request, 'about.html')

def passenger(request):
    return render(request, 'about.html')

def districts(request):
    return render(request, 'about.html')

def metro(request):
    return render(request, 'about.html')

def zelenograd(request):
    return render(request, 'about.html')

def novomoskovskiy(request):
    return render(request, 'about.html')

def troick(request):
    return render(request, 'about.html')

def privacy_policy(request):
    return render(request, 'about.html')

def online_payment(request):
    return render(request, 'about.html')

def cookies_policy(request):
    return render(request, 'about.html')

def uslugi(request):
    return render(request, 'about.html')